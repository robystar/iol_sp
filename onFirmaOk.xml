<plominodatabase id="iol_sp">
  <design>
    <element id="onFirmaOk" title="onFirmaOk" type="PlominoAgent">
      <id type="Products.Archetypes.Field.StringField">onFirmaOk</id>
      <Content type="Products.Archetypes.Field.TextField"><![CDATA[from iol.firmadigitale.plomino_utils import get_stato_firma, setfile_b64encode

docId = args[0]
data = args[1]
db = context.getParentDatabase()
doc = db.getDocument(docId)

#Volendo da iddoc potrei recuperare le informazioni messe nel campo elenco_firmadigitale
#Cosi eviterei di passare tutti i dati nella url

field = data.get('field', '')
ufficio = data.get('ufficio', '')
fid = data.get('iddoc', data.get('fid', ''))
field_prot = data.get('field_protocollo', '')
field_data = data.get('field_data', '')
#Preparo i parametri per la chiamata alla getStato
params = dict(
    foreign_id_object=fid,
    idufficio=ufficio,
    # auth = "",
    scarica=True
)
#Setto un item con i parametri della chiamata (Momentaneo)
doc.setItem('getstato_params', params)

#Chiamata alla getStato
res = get_stato_firma(doc, params)
try:
    elenco_chiavi = res.keys()
except:
    elenco_chiavi = []

#Verifico se la chiamata è andata a buon fine
if not ('esito' in elenco_chiavi and 'file64_firmato' in elenco_chiavi):
    doc.setItem('azione_firma', res)
    if 'log_enabled' in data.keys() and data['log_enabled']:
        title = " Notifica Errore Firma Digitale - %s" %docId
        message = u"Si &egrave; verificato  un errore durante il processo di acquisizione del documento firmato <a target='_new' href='%s'>%s</a>" %(doc.absolute_url(),docId)
        sendMail(db, data['log_mail'], title, message, sender='assistenza@istanze-online.it',
             immediate=True)
        return



if 'log_enabled' in data.keys() and data['log_enabled']:
    title = " Callback Firma Digitale - %s" %docId
    message = u"Verifica del processo di acquisizione del documento firmato <a target='_new' href='%s'>%s</a>" %(doc.absolute_url(),docId)
    sendMail(db, data['log_mail'], title, message, sender='assistenza@istanze-online.it',
         immediate=True)
if res['esito'] == 'OK' and res['file64_firmato']:
    documento_firmato = dict()
    documento_firmato[res['nome_file_firmato']] = res['file64_firmato']
    setfile_b64encode(doc, field, documento_firmato, True)
    try:
        protocollo = int(res["numero_protocollo"])
        dataprot = StringToDate("%s %s" % (res["data_protocollo"].replace(" 00:00:00", ""), res["ora_protocollo"]),
                            "%d/%m/%Y %H:%M:%S")
        if field_prot:
            doc.setItem(field_prot, protocollo)
        if field_data:
            doc.setItem(field_data, dataprot)


    except:
        doc.setItem("azione_firma", 'Errore Protocollo')
        protocollo = ""
        dataprot = ""
        pass
    if 'azioni' in data:
        v = data['azioni'].split(',')
        azioni = []
        for azione in v:
            if not azione in azioni:
                azioni.append(azione)

        for azione in azioni:
            if doc and doc.isActionSupported(azione):
                doc.doAction(azione)

#Recupero le informazioni riguardanti la firma
elencofirma = doc.getItem('elenco_firmadigitale', {})
#Se il foreign_id_object è nel dizionario aggiorno le informazioni
if fid in elencofirma.keys():
    elencofirma[fid]["esito"] = res["esito"]
    elencofirma[fid]["timestamp"] = DateToString(Now(),"%d/%m/%Y %H:%M:%S")
    if protocollo:
        elencofirma[fid]["protocollo"] = protocollo
    if data:
        elencofirma[fid]["data_protocollo"] = DateToString(dataprot,"%d/%m/%Y %H:%M:%S")
    doc.setItem('elenco_firmadigitale', elencofirma)
]]></Content>
      <RunAs type="Products.Archetypes.Field.StringField">OWNER</RunAs>
    </element>
  </design>
</plominodatabase>
